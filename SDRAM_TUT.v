
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module SDRAM_TUT(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire  test_software_reset_n;
wire  test_global_reset_n;
wire  test_start_n;

wire  sdram_test_pass;
wire  sdram_test_fail;
wire  sdram_test_complete;

//reg [23:0] heart_beat=24'd0;
//3B9A_CA00
reg [27:0] reset_release = 28'h0000_0000;
wire  reset_DRAM_CTRL;


reg [23:0]  cont=24'd0;
reg [31:0]  blink=32'd0;
reg[4:0] sample=5'b00000;
wire [2:0] test_result;


reg 	[24:0]	ADDR_COUNTER=24'd0;
reg 	[24:0]	DATA_SEG=24'd0;
wire	[15:0]		DATA_READ;
reg [15:0] DATA_WRITE;
wire RD_DATA_READY;
wire WR_REQUEST_APPROVED;
wire RD_REQUEST_APPROVED;
//=======================================================
//  Structural coding
//=======================================================

wire pll_c2_to_slow_clk;
wire KEY_1;
wire clk_c0;//100MHZ
wire clk_c1;//100MHZ-3ns for DRAM


sdram_pll0 pll1(
	.areset(),
	.inclk0(MAX10_CLK1_50),
	.c0(clk_c0),
	.c1(clk_c1),
	.c2(pll_c2_to_slow_clk),
	.locked());
	
debouncer debouncer_KEY0(
	.slow_clk(pll_c2_to_slow_clk),
	.btn_in(KEY[0]),
	.btn_out(KEY_0)
);
	
debouncer debouncer_KEY1(
	.slow_clk(pll_c2_to_slow_clk),
	.btn_in(KEY[1]),
	.btn_out(KEY_1)
);

SEG7_LUT_6 display(	
.oSEG0(HEX0),
.oSEG1(HEX1),
.oSEG2(HEX2),
.oSEG3(HEX3),
.oSEG4(HEX4),
.oSEG5(HEX5),
.iDIG(DATA_SEG[23:0]) );



SDRAM_CTRL(
			.RE(KEY_0),
			.WR(KEY_1),
			.ADDR(ADDR_COUNTER),//in 24:0
			.oRD_DATA_READY(RD_DATA_READY),//out
			.RD_REQUEST_APPROVED(RD_REQUEST_APPROVED),//out
			.WR_REQUEST_APPROVED(WR_REQUEST_APPROVED),
	  		.RD_DATA(DATA_READ),//out 15:0
			.WR_DATA(DATA_WRITE),//out 15:0
			.MAX10_CLK1_50(clk_c0),
	 		.MAX10_CLK2_50(clk_c1),
			.DRAM_ADDR(DRAM_ADDR),
		   .DRAM_BA(DRAM_BA),
		   .DRAM_CAS_N(DRAM_CAS_N),
		   .DRAM_CKE(DRAM_CKE),
		   .DRAM_CLK(DRAM_CLK),
	      .DRAM_CS_N(DRAM_CS_N),
			.DRAM_DQ(DRAM_DQ),
	      .DRAM_LDQM(DRAM_LDQM),
	      .DRAM_RAS_N(DRAM_RAS_N),
	      .DRAM_UDQM(DRAM_UDQM),
	      .DRAM_WE_N(DRAM_WE_N),
			.LEDR(LEDR[4:0]),//on during idle
			.reset_n(reset_DRAM_CTRL));
//=======================================================
//  Structural coding test
//=======================================================
// / //////////////////////////////////////////////
// reset_n and start_n control

always @ (posedge clk_c0)
begin
	if(reset_release<28'h1DCD6500)//2 sec
		reset_release<=reset_release+1;
	
end

assign reset_DRAM_CTRL=(reset_release==28'h1DCD6500)?1:0;
assign LEDR[9]=reset_DRAM_CTRL & blink[23] ;//ready light
assign LEDR[8]=WR_REQUEST_APPROVED & blink[23] ;//write light
assign LEDR[7]=RD_REQUEST_APPROVED & blink[23] ;//read light

reg read_flag_ack=1'b0;
reg write_flag_ack=1'b0;

always @(RD_DATA_READY)
begin
	if(RD_DATA_READY)//rising means data ready
		read_flag_ack<=1'b1;
	else
		read_flag_ack<=1'b0;
end

always @(WR_REQUEST_APPROVED)
begin
	if(WR_REQUEST_APPROVED)//rising means data written
		write_flag_ack<=1'b1;
	else
		write_flag_ack<=1'b0;
end

always @ (posedge KEY_0)
begin
			if(!read_flag_ack)
			begin
				if(KEY_0 & reset_DRAM_CTRL & SW[0])//enable address counting after reset
					ADDR_COUNTER <= ADDR_COUNTER + 1'b1;
				else if(KEY_0 & reset_DRAM_CTRL & !SW[0])//enable address counting after reset
					ADDR_COUNTER <= ADDR_COUNTER - 1'b1;
			end
			
				
end

always @ (posedge KEY_1)
begin
			if(!write_flag_ack)
				DATA_WRITE<={6'b111111,ADDR_COUNTER};
			
				
end

always @ (ADDR_COUNTER or DATA_READ )
begin
	case(SW[1])
		1'b0:DATA_SEG<=ADDR_COUNTER;
		1'b1:DATA_SEG<=DATA_READ;
		default:DATA_SEG<=23'b1;
	endcase
	
end

always @ (posedge MAX10_CLK1_50)
begin
	blink <= blink + 1'b1;
end

//=======================================================
//  END Structural coding test
//=======================================================

endmodule
